#![no_std]
#![no_main]

use hal::{clock::ClockControl, gpio::IO, peripherals::Peripherals, prelude::*, Delay};
use esp_backtrace as _;
use esp_println::println;

#[entry]
fn main() -> ! {
    let peripherals = Peripherals::take();
    let system = peripherals.SYSTEM.split();
    let clocks = ClockControl::boot_defaults(system.clock_control).freeze();

    // Set GPIO5 as an output, and set its state high initially.
    let io = IO::new(peripherals.GPIO, peripherals.IO_MUX);
    let mut led = io.pins.gpio4.into_push_pull_output();

    led.set_high().unwrap();

    // Initialize the Delay peripheral, and use it to toggle the LED state in a
    // loop.
    let mut delay = Delay::new(&clocks);

    let sheet: [(u32,  u32, u32); 599] = [
        (1701, 0, 130435), (1701, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (1908, 0, 130435), (1908, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (2024, 0, 130435), (2024, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (2146, 0, 130435), (2146, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (1701, 0, 130435), (1701, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (1908, 0, 130435), (1908, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (2024, 0, 130435), (2024, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (2146, 0, 130435), (2146, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (852, 0, 130435), (852, 0, 130435), (426, 0, 260870), (568, 0, 391305), (602, 0, 260870), (638, 0, 260870), (716, 0, 260870), (852, 0, 130435), (716, 0, 130435), (638, 0, 130435), (956, 0, 130435), (956, 0, 130435), (426, 0, 260870), (568, 0, 391305), (602, 0, 260870), (638, 0, 260870), (716, 0, 260870), (852, 0, 130435), (716, 0, 130435), (638, 0, 130435), (1012, 0, 130435), (1012, 0, 130435), (426, 0, 260870), (568, 0, 391305), (602, 0, 260870), (638, 0, 260870), (716, 0, 260870), (852, 0, 130435), (716, 0, 130435), (638, 0, 130435), (1073, 0, 130435), (1073, 0, 130435), (426, 0, 260870), (568, 0, 391305), (602, 0, 260870), (638, 0, 260870), (716, 0, 260870), (852, 0, 130435), (716, 0, 130435), (638, 0, 130435), (852, 0, 130435), (852, 0, 130435), (426, 0, 260870), (568, 0, 391305), (602, 0, 260870), (638, 0, 260870), (716, 0, 260870), (852, 0, 130435), (716, 0, 130435), (638, 0, 130435), (956, 0, 130435), (956, 0, 130435), (426, 0, 260870), (568, 0, 391305), (602, 0, 260870), (638, 0, 260870), (716, 0, 260870), (852, 0, 130435), (716, 0, 130435), (638, 0, 130435), (1012, 0, 130435), (1012, 0, 130435), (426, 0, 260870), (568, 0, 391305), (602, 0, 260870), (638, 0, 260870), (716, 0, 260870), (852, 0, 130435), (716, 0, 130435), (638, 0, 130435), (1073, 0, 130435), (1073, 0, 130435), (426, 0, 260870), (568, 0, 391305), (602, 0, 260870), (638, 0, 260870), (716, 0, 260870), (852, 0, 130435), (716, 0, 130435), (638, 0, 130435), (716, 130435, 130435), (716, 0, 130435), (716, 0, 260870), (716, 0, 260870), (716, 0, 260870), (852, 0, 260870), (852, 0, 652175), (716, 0, 260870), (716, 0, 130435), (716, 0, 260870), (638, 0, 260870), (602, 0, 260870), (638, 0, 130435), (716, 0, 130435), (852, 0, 130435), (716, 0, 130435), (638, 0, 391305), (716, 130435, 130435), (716, 0, 130435), (716, 0, 260870), (638, 0, 260870), (602, 0, 260870), (568, 0, 260870), (478, 130435, 130435), (568, 0, 391305), (426, 0, 260870), (426, 0, 260870), (426, 0, 130435), (568, 0, 130435), (426, 0, 130435), (478, 0, 1173915), (568, 130435, 130435), (716, 0, 130435), (716, 0, 260870), (716, 0, 260870), (716, 0, 260870), (852, 0, 260870), (852, 0, 652175), (568, 130435, 130435), (716, 0, 130435), (716, 0, 260870), (716, 0, 260870), (852, 0, 260870), (716, 0, 260870), (568, 0, 260870), (716, 0, 130435), (852, 0, 260870), (426, 0, 260870), (568, 0, 260870), (638, 0, 260870), (716, 0, 260870), (716, 0, 260870), (638, 0, 260870), (716, 0, 260870), (852, 0, 260870), (1073, 0, 260870), (956, 0, 130435), (852, 130435, 130435), (716, 0, 260870), (956, 1043480, 1173915), (716, 0, 130435), (852, 0, 130435), (716, 0, 130435), (638, 0, 130435), (602, 0, 130435), (638, 0, 130435), (716, 0, 130435), (852, 0, 130435), (602, 0, 65218), (638, 0, 65218), (716, 0, 65218), (852, 0, 65218), (716, 130435, 130435), (638, 130435, 1043480), (602, 0, 260870), (568, 0, 130435), (478, 130435, 130435), (568, 0, 130435), (602, 0, 130435), (638, 0, 130435), (716, 0, 130435), (852, 0, 130435), (759, 0, 130435), (716, 0, 260870), (638, 0, 260870), (568, 0, 260870), (478, 0, 260870), (903, 0, 260870), (602, 0, 260870), (602, 0, 130435), (638, 0, 130435), (716, 0, 130435), (638, 0, 1173915), (1433, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (716, 0, 260870), (956, 0, 521740), (852, 0, 521740), (759, 0, 521740), (1136, 0, 521740), (956, 0, 521740), (759, 0, 521740), (568, 0, 1043480), (568, 0, 130435), (602, 0, 130435), (638, 0, 130435), (676, 0, 130435), (716, 0, 130435), (759, 0, 130435), (804, 0, 130435), (852, 0, 130435), (1205, 0, 913045), (1073, 1043480, 1173915), (716, 0, 130435), (852, 0, 130435), (716, 0, 130435), (638, 0, 130435), (602, 0, 130435), (638, 0, 130435), (716, 0, 130435), (852, 0, 130435), (602, 0, 65218), (638, 0, 65218), (716, 0, 65218), (852, 0, 65218), (716, 130435, 130435), (956, 130435, 1043480), (602, 0, 260870), (568, 0, 130435), (478, 130435, 130435), (568, 0, 130435), (602, 0, 130435), (638, 0, 130435), (716, 0, 130435), (852, 0, 130435), (759, 0, 130435), (716, 0, 260870), (638, 0, 260870), (568, 0, 260870), (478, 0, 260870), (451, 0, 260870), (602, 0, 260870), (602, 0, 130435), (638, 0, 130435), (716, 0, 130435), (638, 0, 1173915), (1433, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (716, 0, 260870), (956, 0, 521740), (852, 0, 521740), (759, 0, 521740), (1136, 0, 521740), (956, 0, 521740), (759, 0, 521740), (568, 0, 1043480), (568, 0, 130435), (602, 0, 130435), (638, 0, 130435), (676, 0, 130435), (716, 0, 130435), (759, 0, 130435), (804, 0, 130435), (852, 0, 130435), (903, 0, 913045), (804, 0, 1173915), (2146, 0, 1565220), (1433, 0, 521740), (1515, 0, 1043480), (1701, 0, 1043480), (1433, 2086960, 2086960), (2146, 0, 1565220), (1433, 0, 521740), (1515, 0, 1043480), (1701, 0, 1043480), (1701, 2086960, 2086960), (1701, 0, 130435), (1701, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (1908, 0, 130435), (1908, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (2024, 0, 130435), (2024, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (2024, 0, 130435), (2024, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (1701, 0, 130435), (1701, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (1908, 0, 130435), (1908, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 260870, 130435), (716, 0, 260870), (1136, 260870, 130435), (956, 0, 260870), (1276, 130435, 130435), (852, 0, 260870), (1908, 0, 130435), (1515, 0, 130435), (852, 260870, 130435), (716, 0, 260870), (759, 260870, 130435), (956, 0, 260870), (759, 130435, 130435), (852, 0, 260870), (1136, 0, 130435), (1515, 0, 130435), (1433, 0, 130435), (1433, 0, 260870), (1433, 0, 260870), (1073, 0, 130435), (1073, 0, 260870), (1433, 0, 260870), (1073, 0, 260870), (1433, 0, 260870), (1073, 0, 130435), (1073, 0, 260870), (956, 0, 260870), (1276, 0, 260870), (956, 0, 130435), (956, 0, 260870), (1276, 0, 260870), (956, 0, 260870), (1276, 0, 260870), (956, 0, 130435), (956, 0, 260870), (852, 0, 260870), (1136, 0, 260870), (852, 0, 130435), (852, 0, 260870), (1205, 0, 260870), (903, 0, 260870), (1205, 0, 260870), (903, 0, 130435), (903, 0, 260870), (956, 0, 260870), (1276, 0, 260870), (956, 0, 130435), (956, 0, 260870), (1276, 0, 260870), (1012, 0, 260870), (1276, 0, 260870), (1012, 0, 130435), (1012, 0, 260870), (1073, 0, 260870), (1433, 0, 260870), (1073, 0, 130435), (1073, 0, 260870), (1433, 0, 260870), (1073, 0, 260870), (1433, 0, 260870), (1073, 0, 130435), (1073, 0, 260870), (956, 0, 260870), (1276, 0, 260870), (956, 0, 130435), (956, 0, 260870), (1276, 0, 260870), (956, 0, 260870), (1276, 0, 260870), (956, 0, 130435), (956, 0, 260870), (852, 0, 260870), (1136, 0, 260870), (852, 0, 130435), (852, 0, 260870), (1136, 0, 260870), (852, 0, 260870), (1136, 0, 260870), (852, 0, 130435), (852, 0, 260870), (852, 0, 260870), (1136, 0, 260870), (852, 0, 130435), (852, 0, 260870), (1136, 0, 260870), (852, 0, 260870), (1136, 0, 260870), (852, 0, 130435), (852, 0, 260870), (1433, 0, 260870), (1433, 0, 260870), (1073, 0, 130435), (1073, 0, 260870), (1433, 0, 260870), (1073, 0, 260870), (1433, 0, 260870), (1073, 0, 130435), (1073, 0, 260870), (956, 0, 260870), (1276, 0, 260870), (956, 0, 130435), (956, 0, 260870), (1276, 0, 260870), (956, 0, 260870), (1276, 0, 260870), (956, 0, 130435), (956, 0, 260870), (852, 0, 260870), (1136, 0, 260870), (852, 0, 130435), (852, 0, 260870), (1205, 0, 260870), (903, 0, 260870), (1205, 0, 260870), (903, 0, 130435), (903, 0, 260870), (956, 0, 260870), (1276, 0, 260870), (956, 0, 130435), (956, 0, 260870), (1276, 0, 260870), (1012, 0, 260870), (1276, 0, 260870), (1012, 0, 130435), (1012, 0, 260870), (1073, 0, 260870), (1433, 0, 260870), (1073, 0, 130435), (1073, 0, 260870), (1433, 0, 260870), (1073, 0, 260870), (1433, 0, 260870), (1073, 0, 130435), (1073, 0, 260870), (956, 0, 260870), (1276, 0, 260870), (956, 0, 130435), (956, 0, 260870), (1276, 0, 260870), (956, 0, 260870), (1276, 0, 260870), (956, 0, 130435), (956, 0, 260870), (1701, 0, 130435), (1701, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (1701, 0, 130435), (1701, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (2146, 0, 130435), (2146, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (1908, 0, 130435), (1908, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (1701, 0, 130435), (1701, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435), (1276, 0, 130435), (1701, 0, 130435), (1701, 0, 130435), (852, 0, 260870), (1136, 0, 391305), (1205, 0, 260870), (1276, 0, 260870), (1433, 0, 260870), (1701, 0, 130435), (1433, 0, 130435)
    ];

    loop {
        for (frequency, pause_time, duration) in &sheet {
            println!("Playing {frequency} for {duration} us");
            for _ in 0..*duration/1000 {
                led.toggle().unwrap();
                delay.delay_us(*frequency);
            }
            if *pause_time > 0 {
                delay.delay_us(*pause_time);
            } else {
                delay.delay_us(*frequency);
            }
        }
    }
}